datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String          @id @default(uuid())
  username  String          @unique
  email     String          @default("")
  avatarUrl String?         @default("")
  isAdmin   Boolean         @default(false)
  recipes   Recipe[]
  comments  RecipeComment[]
  votes     Vote[]
}

model Recipe {
  id           String          @id @default(uuid())
  title        String          @default("")
  ingredients  Ingredient[]
  steps        Step[]
  author       User            @relation(fields: [authorId], references: [id])
  authorId     String
  imageUrl     String?         @default("")
  notes        String?         @default("")
  upvotes      Int             @default(0)
  downvotes    Int             @default(0)
  featured     Boolean         @default(false)
  prepTime     Int             @default(0)
  cookTime     Int             @default(0)
  servings     Int             @default(0)
  photo        File?
  tags         Tag[]
  adminComment RecipeComment[]
  pending      Boolean         @default(false)
  inReview     Boolean         @default(false)
  denied       Boolean         @default(false)
  published    Boolean         @default(false)
  votes        Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id          String @id @default(uuid())
  name        String
  amount      String
  measurement String
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId    String
}

model Step {
  id          String @id @default(uuid())
  order       Int
  description String
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId    String
}

model Tag {
  id      String   @id @default(uuid())
  name    String
  recipes Recipe[]
}

model File {
  id        String  @id @default(uuid())
  name      String
  type      String
  key       String
  uploadUrl String
  recipe    Recipe? @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId  String? @unique

  createdAt DateTime @default(now())
}

model RecipeComment {
  id           String  @id @default(uuid())
  recipe       Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId     String
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  text         String
  recipeStatus String  @default("pending")
  userSeen     Boolean @default(false)

  createdAt DateTime @default(now())
}

model Vote {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
  recipeId String
  upvote   Boolean?
  downvote Boolean?
}
